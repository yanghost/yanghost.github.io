<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity 学习笔记 D01</title>
      <link href="2021/04/01/Unity-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/04/01/Unity-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="unity3D-快捷键"><a href="#unity3D-快捷键" class="headerlink" title="unity3D 快捷键"></a>unity3D 快捷键</h2><h3 id="Scene-场景面板"><a href="#Scene-场景面板" class="headerlink" title="Scene 场景面板"></a>Scene 场景面板</h3><ul><li>提供设计游戏界面的可视化面板</li><li>常用快捷键<ol><li>按下鼠标滚轮拖动场景，滑动滚轮缩放场景。</li><li>鼠标右键旋转场景，点击”<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20163114.png">“后，通过左键移动场景。</li><li>点击右键同时按下W/S/A/D/Q/E键可实现场景漫游。</li><li>在Scene面板选中物体后安F键，或在Hierarchy面板双击物体，可将物体设置为场景试图的中心。</li><li>按住alt键同时通过鼠标左键围绕某种物体旋转场景，鼠标右键缩放场景。</li></ol></li></ul><h2 id="顶点吸附功能"><a href="#顶点吸附功能" class="headerlink" title="顶点吸附功能"></a>顶点吸附功能</h2><h3 id="变换工具"><a href="#变换工具" class="headerlink" title="变换工具"></a>变换工具</h3><ul><li>移动场景Q<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20163114.png"></li><li>移动物体W<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20202822.png"></li><li>旋转物体E<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20202916.png"></li><li>缩放物体R<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20202957.png"></li><li>顶点吸附：选择物体后按住V键，定位定点，在拖拽到目标物体某个定点上。</li></ul><blockquote><p>备注：先松V键</p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="练习：搭建车库"><a href="#练习：搭建车库" class="headerlink" title="练习：搭建车库"></a>练习：搭建车库</h3><blockquote><p><strong>由4个Plane（平面），3个TrafficCone（交通圆锥体），1个humvee（悍马车）组成。</strong></p></blockquote><h2 id="变换切换"><a href="#变换切换" class="headerlink" title="变换切换"></a>变换切换</h2><h3 id="变换切换-1"><a href="#变换切换-1" class="headerlink" title="变换切换"></a>变换切换</h3><ul><li><p>左边是改变游戏对象的轴心点</p></li><li><p>Center：设置轴心点在物体中心</p></li><li><p>Pivot：使用物体本身的轴心</p></li><li><p>右边是改变物体的坐标，Global：世界坐标；Local：自身坐标</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20203851.png"></p><h2 id="播放控件"><a href="#播放控件" class="headerlink" title="播放控件"></a>播放控件</h2><h3 id="播放控件-1"><a href="#播放控件-1" class="headerlink" title="播放控件"></a>播放控件</h3><ul><li><p>从左到右依次是预览游戏、暂停游戏、逐帧播放</p></li><li><p>查看游戏最终运行后的画面。在运行模式下，任何更改都只是暂时的，在退出运行时会重置复位。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20204429.png"></p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="视图-1"><a href="#视图-1" class="headerlink" title="视图"></a>视图</h3><ul><li><p>ISO：正交观察模式</p></li><li><p>Persp：透视观察模式（近大远小）</p></li><li><p>视图角度：上下左右前后</p><p>![](<a href="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN/img/屏幕截图</a> 2021-04-01 204713.png)</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20204837.png"></p><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><h3 id="坐标-1"><a href="#坐标-1" class="headerlink" title="坐标"></a>坐标</h3><ul><li><p>坐标：X红色、Y绿色、Z蓝色。</p></li><li><p>世界坐标：整个场景的固定坐标，不随物体旋转而改变。</p></li><li><p>本地坐标：物体自身坐标，随旋转而改变。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20205236.png"></p></li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h3 id="场景Scene"><a href="#场景Scene" class="headerlink" title="场景Scene"></a>场景Scene</h3><ul><li>一组相关联的游戏对象的集合，通常游戏中每个关卡就是一个场景，用于展现当前关卡中的所有物体。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20210255.png"></p><h2 id="游戏对象"><a href="#游戏对象" class="headerlink" title="游戏对象"></a>游戏对象</h2><h3 id="游戏对象GameObject"><a href="#游戏对象GameObject" class="headerlink" title="游戏对象GameObject"></a>游戏对象GameObject</h3><ul><li><p>运行时出现在场景中的游戏物体。</p></li><li><p>例如：人物、地形、树木…..</p></li><li><p>是一种容器，可以挂载组件。</p></li><li><p>父、子物体</p></li><li><p>在Hierarchy面板中，将一个物体拖拽到另外一个物体中。</p></li><li><p>子物体将继承父物体的移动，旋转和缩放属性，但子物体不影响父物体。</p></li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件Component"><a href="#组件Component" class="headerlink" title="组件Component"></a>组件Component</h3><ul><li>是游戏对象的功能模块。</li><li>每个组件都是一个类的实例。</li><li>Transform变换组件：决定物体位置、旋转、缩放比。</li><li>Mesh Filter 网格过滤器：用于从资源中获取网格信息。</li><li>Mesh Renderer 网格渲染器：从网格过滤器中获得几何形状，再根据变化组件定义的位置进行渲染。</li><li>网格过滤器与网格渲染器联合使用，使模型显示到屏幕上。</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN@master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-01%20211620.png"></p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><h3 id="练习：-创造子弹"><a href="#练习：-创造子弹" class="headerlink" title="练习： 创造子弹"></a>练习： 创造子弹</h3><blockquote><p><strong>由2个Capsule（胶囊）1个Cylinder（圆柱体）组成。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 学习 </tag>
            
            <tag> D01 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不争，自有天地</title>
      <link href="2021/03/31/%E4%B8%8D%E4%BA%89%EF%BC%8C%E8%87%AA%E6%9C%89%E5%A4%A9%E5%9C%B0/"/>
      <url>2021/03/31/%E4%B8%8D%E4%BA%89%EF%BC%8C%E8%87%AA%E6%9C%89%E5%A4%A9%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="不争，自有天地"><a href="#不争，自有天地" class="headerlink" title="不争，自有天地"></a>不争，自有天地</h1><blockquote><p>来源：石桥居士 发布时间：2019/06/04 作者：康娜</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img10.360buyimg.com/ddimg/jfs/t1/165634/1/15775/223305/60648f33E43f428e2/7310b02cb1323407.jpg"></p><p><strong>所谓心事，就是把事情搁在心里，重重郁结，无法纾解，然后发现幸福变得稀缺模糊，支离破碎，甚至零落成泥。</strong></p><p> <strong>这一路上，明与暗，多与少，失与得，在时光里缠绕。</strong></p><p> <strong>和谁过不去，最后都是和自己过不去。</strong></p><p> <strong>轻易把自己交给焦躁、哭泣、诅咒，很轻易地陷进去，很困难地走出来。</strong></p><p> <strong>陷进去，是摆不脱、看不透，走不出，是站不高、望不远，把自己囚锁在悲苦的囹圄，愁眉苦脸、四面楚歌。</strong></p><p> <strong>天大地大，但不管走到那里，都有不喜欢你的人，也有你不喜欢的人，生活本就是一门遗憾的艺术，有悲苦的人生才是活的人生。</strong></p><p> <strong>不和不如自己的人计较，深厚与浅薄，单纯与复杂，传统与时尚，镰刀与弯月，他看不上你，你也说服不了他，因为你们根本不在一个频道。也不和自己不如的人计较。</strong></p><p> <strong>君子不争炎凉，和高人争风计较，只能让自己心胸更为狭窄，钻进了死胡同，不仅输掉了能力，也输掉了风度和器量。</strong></p><p> <strong>吾有一生，不争朝夕；我有心胸，不计输赢。</strong></p><p> <strong>“处处绿杨堪系马，家家有路到长安。”</strong></p><p> <strong>不与春花争俏，不与夏雨争凉，不与秋虫争鸣，不与冬雪争净，夫唯不争，即是王。</strong></p><p> <strong>水不争，自由自在，天不争，百鸟尽归，不争，自有世界，也自有境界。</strong></p><p> <strong>“欲为大树，莫与草争”。</strong></p><p> <strong>有些事情，你争赢了，也输了。</strong></p><p> <strong>世上，最可爱的精神是百折不挠，最洒脱的态度是不去计较。</strong></p><p> <strong>闭目想想，苦乐、悲喜、聚散，最终都随风，随烟、随云四处散去，红尘繁华，不过水月镜花。</strong></p><p> <strong>人生，不管是一般现在时，还是正在进行时，最后都成过去完成时。</strong></p><p> <strong>拳头大的心，若是承载了愤怒与伤痛，哪里还装得下明月和清风。</strong></p><p> <strong>最喜欢，墨水瓶斜斜插着一枝花，虽是灰尘满面，却遮不住喜色，枝叶疏朗，其间蕴含大自在。</strong></p><p> <strong>不如，去做一朵清香的茉莉，即使有人将你踩到了脚下，你的清香，也会跟随他的脚步四处流浪。</strong></p><p> <strong>把天地折叠于心，把明月盛装进胸，清风来了，花朵开了，万事自在</strong></p>]]></content>
      
      
      <categories>
          
          <category> 美文散文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美文 </tag>
            
            <tag> 散文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora 完全使用详解</title>
      <link href="2021/03/30/Typora-%E6%96%B9%E6%B3%95/"/>
      <url>2021/03/30/Typora-%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Typora-完全使用详解"><a href="#Typora-完全使用详解" class="headerlink" title="Typora 完全使用详解"></a>Typora 完全使用详解</h2><p>Typora 一直是我认为桌面端笔记应用应有的终极形态。</p><h2 id="Typora-是什么？"><a href="#Typora-是什么？" class="headerlink" title="Typora 是什么？"></a>Typora 是什么？</h2><p>Typora 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的。</p><h2 id="一个-Markdown-文本编辑器"><a href="#一个-Markdown-文本编辑器" class="headerlink" title="一个 Markdown 文本编辑器"></a>一个 Markdown 文本编辑器</h2><p>Typora 首先是一个 Markdown 文本编辑器，它支持且仅支持 Markdown 语法的文本编辑。在 <a href="https://typora.io/">Typora 官网</a> 上他们将 Typora 描述为 「A truly <strong>minimal</strong> markdown editor. 」。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/yanghost/PicGoCDN/img/49c4cdef47bf81018b9871a628523064.png"></p><h2 id="关于-Markdown"><a href="#关于-Markdown" class="headerlink" title="关于 Markdown"></a>关于 Markdown</h2><p>Markdown 是用来编写结构化文档的一种纯文本格式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度的格式排版。你可以在 <a href="https://typora.io/">Typora 官网</a> 中快速入门 Markdown。由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。</p><h3 id="智能标点"><a href="#智能标点" class="headerlink" title="智能标点"></a>智能标点</h3><p>我认为「智能标点」是比较有趣的一点。它可以自动帮你将不是很美观的直引号 <code>&quot;</code> <code>&#39;</code> 转化为更美观的弯引号 <code>“</code> <code>‘</code> <code>’</code> <code>”</code>。</p><h3 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h3><p>Typora 的图片插入功能是广受好评的。要知道，Markdown 原生不太注重图片插入的功能，但你可以在 Typora 中：</p><ul><li>直接使用 <code>右键 - 复制 Ctrl + V</code> 将网络图片、剪贴板图片复制到文档中</li><li>拖动本地图片到文档中</li></ul><p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它加上标题。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.sspai.com/2019/05/24/1de13eae43785e27bbbcd631931fd161.png" alt="img"></p><p>更强大的是，Typora 支持在拖动或 <code>Ctrl + V</code> 网络图片后自动将其保存到本地。你可以在 <code>文件 - 偏好设置 - 编辑器 - 图片插入</code> 中选择复制到哪个路径，什么情况下需要复制。</p><h3 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h3><p>Typora 在这一方面显然已经领先了一大步——他们连 Markdown 语法的标记都在实时预览中消去了。当你离开正在编辑的有格式的文本段后，Typora 会自动隐藏 Markdown 标记，只留下<strong>「所见即所得」</strong>的美妙。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.sspai.com/2019/05/24/f99c9ce02e2728ec6c64b443947fc67e.gif" alt="img"></p><p>为了防止一些程序 bug 的发生（虽然在我使用下来感到是很少的）导致格式问题无法修改，Typora 保留了一个<strong>「源代码模式」</strong>。你可以通过 <code>视图 - 源代码模式</code> 或左下角的 <code>&lt;/&gt;</code> 按钮进入。</p><h3 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h3><p>Typora 在空格与换行部分主要是使用 <a href="http://www.commonmark.cn/w/">CommonMark</a> 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p><ul><li><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个 <code>\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</li><li><strong>软换行：</strong>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 <code>Shift + Enter</code> 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</li><li><strong>硬换行：</strong>你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li><li><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li><li><strong>Windows 风格（CR+LF）与 Unix 风格（CR）的换行符：</strong>CR 表示回车 <code>\r</code> ，即回到一行的开头，而 LF 表示换行 <code>\n</code> ，即另起一行。<br>所以 Windows 风格的换行符本质是「回车 + 换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix / Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。   你可以在 <code>文件 - 偏好设置 - 编辑器 - 默认换行符</code> 中对此进行切换。</li></ul><p>空格、换行、换段的测试结果图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.sspai.com/2019/05/24/5c2fbaa53b27666a7fd0b07ac3e100bf.png" alt="img"></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.sspai.com/2019/05/24/51bf2f290592e1ddbadb95765c04f297.png" alt="img"></p><h3 id="链接引用与脚注"><a href="#链接引用与脚注" class="headerlink" title="链接引用与脚注"></a>链接引用与脚注</h3><p><strong>链接引用</strong>类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 的语法来为你的文档加上链接引用。</p><p><strong>脚注</strong>在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.sspai.com/2019/05/24/5f82606e6d89fe1eb24705c4ca6b895d.png" alt="img"></p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>除了文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。</p><ul><li><strong>快速打开：</strong>你可以通过 <code>文件 - 快速打开...</code> 或 <code>Ctrl + P</code> 快捷键快速打开最近的文档。</li><li><strong>保存：</strong>Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。</li><li><strong>导入：</strong>Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。</li><li><strong>导出：</strong>Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 <strong>Pandoc 插件</strong>来导出更多例如 docx，LaTeX 等格式。 </li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.sspai.com/2019/05/24/ba295f21f0b71646bb36a0517e868ced.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后，让我们一起用这款<strong>顶级桌面文本生产力工具</strong>吧！😆</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Swiper 文章置顶插件</title>
      <link href="2021/03/30/hexo-swiper-%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E6%8F%92%E4%BB%B6/"/>
      <url>2021/03/30/hexo-swiper-%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NPM-插件安装的部署方法："><a href="#NPM-插件安装的部署方法：" class="headerlink" title="NPM 插件安装的部署方法："></a>NPM 插件安装的部署方法：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-swiper-bar --save</span><br><span class="line">两者用其一</span><br><span class="line">cnpm i hexo-swiper-bar --save</span><br></pre></td></tr></table></figure><h1 id="网站根目录-config-配置项："><a href="#网站根目录-config-配置项：" class="headerlink" title="网站根目录_config 配置项："></a>网站根目录_config 配置项：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">swiper:</span><br><span class="line">  enable: true</span><br><span class="line">  priority: 2</span><br><span class="line">  enable_page: &#x2F;</span><br><span class="line">  layout:</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: &#39;&lt;div class&#x3D;&quot;recent-post-item&quot; style&#x3D;&quot;height: auto;width: 100%&quot;&gt;&lt;div class&#x3D;&quot;blog-slider swiper-container-fade swiper-container-horizontal&quot; id&#x3D;&quot;swiper_container&quot;&gt;$&#123;temple_html_item&#125;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">  plus_style: &quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="enable"><a href="#enable" class="headerlink" title="enable"></a>enable</h2><p><strong>参数：</strong>true/false<br><strong>含义：</strong>是否开启插件</p><h2 id="enable-page"><a href="#enable-page" class="headerlink" title="enable_page"></a>enable_page</h2><p><strong>参数：</strong>/<br><strong>含义：</strong>路由地址，如 / 代表主页。/me/ 代表自我介绍页等等</p><h2 id="priority"><a href="#priority" class="headerlink" title="priority"></a>priority</h2><p><strong>参数：</strong>1<br><strong>含义：</strong>插件的叠放顺序，数字越大，叠放约靠前。</p><h2 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h2><p><strong>参数：</strong>type; （class&amp;id）<br><strong>参数：</strong>name;<br><strong>参数：</strong>index；（数字）<br><strong>含义：</strong>如果说 swiper 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p><h2 id="temple-html"><a href="#temple-html" class="headerlink" title="temple_html"></a>temple_html</h2><p><strong>参数：</strong>html 模板字段<br><strong>含义：</strong>包含挂载容器</p><h2 id="plus-style"><a href="#plus-style" class="headerlink" title="plus_style"></a>plus_style</h2><p><strong>参数：</strong>“”<br><strong>含义：</strong>提供可自定义的 style，如加入黑夜模式。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo Swiper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Swiper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO+GITHUB笔记</title>
      <link href="2021/03/27/HEXO-GITHUB%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/27/HEXO-GITHUB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HEXO-GitHub搭建"><a href="#HEXO-GitHub搭建" class="headerlink" title="HEXO+GitHub搭建"></a>HEXO+GitHub搭建</h1><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><p>-<strong>获得个人网站域名</strong><br>-<strong>GitHub创建个人仓库</strong><br>-<strong>安装Git</strong><br>-<strong>安装Node.js</strong><br>-<strong>安装Hexo</strong><br>-<strong>部署网站</strong><br>-<strong>绑定域名</strong><br>-<strong>更换主题</strong><br>-<strong>MarkDown语法</strong><br>-<strong>发布文章</strong><br>-<strong>个性化设置</strong></p><h2 id="获得个人网站域名"><a href="#获得个人网站域名" class="headerlink" title="获得个人网站域名"></a>获得个人网站域名</h2><p>域名是网站的入口，也是网站的第一印象，比如我的的域名是：<a href="https://www.zhangyingfeng.xyz/">https://www.zhangyingfeng.xyz/</a> ，常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p><p>申请域名的地方有很多，这里推荐阿里云：阿里云-为了无法计算的价值 申请入口：域名注册 购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：Build software better, together 点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.<a href="http://github.io/">http://github.io</a> 这个用户名使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：yanghost.github.io</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，请去Git官网； 从Git官网下载：Git - Downloading Package ，选择64位的安装包，下载后安装；也可以用命令直接安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install  git-all  </span><br></pre></td></tr></table></figure><p>在命令行里输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git --version  </span><br></pre></td></tr></table></figure><p>测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>生成ssh密钥文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制<br>打开GitHub_Settings_keys 页面，新建new SSH Key</p><p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a> ：</p><p>这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Hexo基于Node.js，Node.js下载地址：Download | Node.js 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v : 显示版本号为成功</span><br></pre></td></tr></table></figure><p>检测npm是否安装成功，在命令行中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v : 显示版本号为成功</span><br></pre></td></tr></table></figure><p>到这了，安装Hexo的环境已经全部搭建完成。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行<br>使用npm命令安装Hexo，输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。<br>为了检测我们的网站雏形，分别按顺序输入以下两条命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p><blockquote><p>localhost:4000</p></blockquote><p>就能看到Hexo默认网站了</p><blockquote><p>现在来介绍常用的Hexo 命令</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br></pre></td></tr></table></figure><blockquote><p>命令简写</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; &#x3D;&#x3D; hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate #生成</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server #启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><p>上面只是在本地预览，接下来要做的就是就是部署网站，让我们的网站可以被更多的人访问。在设置之前，需要在blog根目录里的config.yml文件称为<strong>站点</strong>配置文件；进入根目录里的themes文件夹，里面也有个config.yml文件，这个称为<strong>主题</strong>配置文件；下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy: </span><br><span class="line">      type:   git</span><br><span class="line">      repo:   https:&#x2F;&#x2F;github.com&#x2F;yanghost&#x2F;yanghost.github.io.git</span><br><span class="line">      branch: master</span><br></pre></td></tr></table></figure><blockquote><p>我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>这时，我们分别输入三条命令：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo  g</span><br><span class="line">hexo  d</span><br></pre></td></tr></table></figure><p>第三条的 hexo d 就是部署网站命令;完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io </a>比如我的xxxx就是我的GitHub用户名：yanghost.github.io</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在腾讯云的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到腾讯云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p><p>主机记录：www 记录类型：A 线路默认 记录值 ： 185.199.109.153（填写IP；此IP为我的GitHub地址）其他为默认；登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<a href="https://zhangyingfeng.xyz点击save保存.进入本地博客文件夹/">https://zhangyingfeng.xyz点击save保存。进入本地博客文件夹</a>  ，进入blog/source目录下，创建一个记事本文件，输入你的域名，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong></p><blockquote><p>进入blog目录中，按住shift键右击打开命令行，依次输入：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="跟换主题"><a href="#跟换主题" class="headerlink" title="跟换主题"></a>跟换主题</h2><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://butterfly.js.org/">https://butterfly.js.org</a> 我自己使用的是Butterfly主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Butterfly主题；</p><blockquote><p>在blog目录中打开命令行输入：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>打开<strong>站点</strong>的config.yml配置文件，修改主题为butterfly置文件_config.yml；</p><blockquote><p>theme: butterfly </p></blockquote><blockquote><p>如果你沒有 pug 以及 stylus 的渲染器，请下载安裝：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a><strong>Markdown语法</strong></h2><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="https://link.zhihu.com/?target=http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="https://link.zhihu.com/?target=http://code52.org/DownmarkerWPF/">MarkPad</a> 和<a href="https://link.zhihu.com/?target=http://www.markdownpad.com/">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以百度了解。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><blockquote><p>我们开始正式发布上线博客文章，在命令行中输入：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;博客的名字&quot;</span><br></pre></td></tr></table></figure><p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了；</p><p>可以用带有预览样式的Markdown编辑器实时预览书写的博文样式，</p><blockquote><p>也可以通过命令 ：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s  </span><br></pre></td></tr></table></figure><blockquote><p> 在本地浏览器的localhost:4000 预览博文效果。</p></blockquote><p>写好博文并且样式无误后，命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d  </span><br></pre></td></tr></table></figure><p>生成、部署网页。随后可以在浏览器中输入域名浏览。</p><h2 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a><strong>个性化设置</strong></h2><p>所谓的个性化设置就是根据个人需要添加不同的插件及功能。</p><p>基本的有：</p><p>网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p><p>在主题配置文件_config.yml修改基本的主题信息，博文打赏的微信、支付宝二维码图片，放在根目录的source文件夹中，并没有使用图床外链。</p><p>社交外链的设置，即在侧栏展示你的个人社交网站信息。</p><p>博文分享的插件jiathis，值设置为true。在配置文件中有很多的个性化设置，可以自己尝试更多的修改。</p><ul><li>添加音乐</li><li>添加图库</li><li>添加电影</li><li>添加友链</li><li>添加评论系统</li><li>添加搜索功能</li></ul><p>……..</p>]]></content>
      
      
      <categories>
          
          <category> Hexo Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Word</title>
      <link href="2021/03/23/Hello%20Word/"/>
      <url>2021/03/23/Hello%20Word/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Hello-Word"><a href="#Hello-Word" class="headerlink" title="Hello Word"></a>Hello Word</h2><blockquote><p>​                                                                              你好，世界！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hello Word </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
